/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfRect;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.objdetect.CascadeClassifier;
import static org.opencv.objdetect.Objdetect.CASCADE_SCALE_IMAGE;
import org.opencv.videoio.VideoCapture;

/**
 *
 * @author CACERES
 */
public class FacialJFrame extends javax.swing.JFrame {

    /**
     * Creates new form FacialJFrame
     */
    String cara_haarcascades;
    CascadeClassifier faceDetector;
  
    boolean capturada;

    /**
     * Creates new form FacialJFrame
     */
    public FacialJFrame() {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        cara_haarcascades = "C:\\opencv\\sources\\data\\haarcascades\\haarcascade_frontalface_alt2.xml";
        faceDetector = new CascadeClassifier(cara_haarcascades);
        initComponents();
        capturarImagen();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelImagen = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout panelImagenLayout = new javax.swing.GroupLayout(panelImagen);
        panelImagen.setLayout(panelImagenLayout);
        panelImagenLayout.setHorizontalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        panelImagenLayout.setVerticalGroup(
            panelImagenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 412, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(panelImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void iniciarFacialJFrame() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FacialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FacialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FacialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FacialJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FacialJFrame().setVisible(true);
            }
        });
    }

    void capturarImagen () {
        (new Thread() {

            public void run() {
                VideoCapture capture = new VideoCapture(0);
                MatOfRect rostros = new MatOfRect();
                MatOfByte mem = new MatOfByte();

                Mat frame = new Mat();
                Mat frame_gray = new Mat();

                Rect[] faceArray;
                Graphics g;

                BufferedImage buff = null;

                if (!capture.isOpened()) {
                    System.out.println("NO ESTA ABIERTA LA CAPTURA");
                } else {
                    System.out.println("ESTA ABIERTA LA CAPTURA");
                }

                while (capture.read(frame)) {
                    if (frame.empty()) {
                        System.out.println("NO HAY REGISTROS DE IMAGEN");
                        break;
                    } else {
                        try {
                            g = panelImagen.getGraphics();
                            Imgproc.cvtColor(frame, frame_gray, Imgproc.COLOR_BGR2GRAY); //para la conversion de escala de grises, convetir a otro color, la que se va a convertir, a donde se va a guadar y el formato que se va a usar para guardar
                            Imgproc.equalizeHist(frame_gray, frame_gray);//se ecualiza la imagen
                            double w = frame.width();//se guarda el ancho de la imagen
                            double h = frame.height();//se guarda el alto de la imagen
                            //                es la cascada que se va a usar para detectar la imagen
                            //detectMultiScale detecta los rostros que hay en la imagen frame_gray, se almacenan todos en la variable llamada rostros,
                            //factor de escala de reduccion de imagen 1.3 para que los calculos sean precisos, mayor el numero menos preciso la deteccion (1.1, reproduce la imagen lentamente

                            faceDetector.detectMultiScale(frame_gray, rostros, 1.3, 2, 0 | CASCADE_SCALE_IMAGE, new Size(30, 30), new Size(w, h));
                            faceArray = rostros.toArray();

                            System.out.println("CANTIDAD DE CARAS " + faceArray.length);

                            if (faceArray.length == 1 && capturada == false) {
                                Imgcodecs imageCodecs = new Imgcodecs();
                                imageCodecs.imwrite("imagen.jpg", frame);
                                capturada = true;
                            }
                            for (int i = 0; i < faceArray.length; i++) {
                                //                    detecta y dibuja un elipse alrededor de la cara
                                //                    para encontrar el punto medio
                                Point center = new Point((faceArray[i].x + faceArray[i].width * 0.5),
                                        (faceArray[i].y + faceArray[i].height * 0.5));
                                //                    dibujar la imagen

                                Imgproc.ellipse(
                                        frame,
                                        center,
                                        new Size(faceArray[i].width * 0.5, faceArray[i].height * 0.5),
                                        0,
                                        0,
                                        360,
                                        new Scalar(123, 213, 23, 220), 4, 8, 0);
                                Mat faceROI = frame_gray.submat(faceArray[i]);//extrae solo la matriz del area de la cara
                                Imgproc.rectangle(
                                        frame,
                                        new Point(faceArray[i].x, faceArray[i].y),
                                        new Point(faceArray[i].x + faceArray[i].width, faceArray[i].y + faceArray[i].height),
                                        new Scalar(123, 213, 23, 220),  4, 8, 0);
                            }
                            Imgcodecs.imencode(".bmp", frame, mem);

                            Image im = ImageIO.read(new ByteArrayInputStream(mem.toArray()));
                            buff = (BufferedImage) im;

                            if (g.drawImage(buff, 0, 0, panelImagen.getWidth(), panelImagen.getHeight(), 0, 0, buff.getWidth(), buff.getHeight(), null)) {

                            }
                        } catch (IOException ex) {
                            Logger.getLogger(FacialJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }

        }).start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panelImagen;
    // End of variables declaration//GEN-END:variables
}
